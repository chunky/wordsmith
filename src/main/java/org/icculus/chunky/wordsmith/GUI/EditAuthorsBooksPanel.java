package org.icculus.chunky.wordsmith.GUI;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.ListModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author chunky
 */
public class EditAuthorsBooksPanel extends javax.swing.JPanel implements DBChangeListener {

    MainWindow mw;
    
    /**
     * Creates new form EditAuthorsBooksPanel
     */
    public EditAuthorsBooksPanel(MainWindow mw) {
        this.mw = mw;
        initComponents();
    }

    public ListModel<BookListItem> getBookListModel() {
        DefaultListModel<BookListItem> m = new DefaultListModel<>();
        try {
            List<BookListItem> bookListFromDB = BookListItem.getBookListFromDB(mw.getDbConn());
            for(BookListItem i : bookListFromDB) {
                m.addElement(i);
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return m;
    }
    
    public void updateLists() {
        authorList.setModel(getAuthorListModel());
        bookList.setModel(getBookListModel());
    }
    
    public ListModel<String> getAuthorListModel() {
        String sql = "SELECT name FROM author WHERE NOT deleted ORDER BY name";
        DefaultListModel<String> m = new DefaultListModel<>();
        try(PreparedStatement stmt = mw.getDbConn().prepareStatement(sql)) {
            try(ResultSet rs = stmt.executeQuery()) {
                while(rs.next()) {
                    m.addElement(rs.getString("name"));
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        return m;
    }
    
    public void addAuthor() {
        String newval = JOptionPane.showInputDialog(this, "Add a new author/penname");
        if(null != newval && newval.length()>0) {
            String sql = "INSERT INTO author (name) VALUES (?)";
            try(PreparedStatement stmt = mw.getDbConn().prepareStatement(sql)) {
                stmt.setString(1, newval);
                stmt.executeUpdate();
                mw.getDbConn().commit();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            mw.notifyDBChange();
        }
    }
    
    public void addBook() {
        String authorname = authorList.getSelectedValue();
        if(null == authorname || authorname.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please choose an author to add a book to");
            return;
        }
        String newval = JOptionPane.showInputDialog(this, "Add a new book under \"" + authorname + "\"");
        if(null != newval && newval.length()>0) {
            String sql = "INSERT INTO book (title, authorid) VALUES (?, (SELECT authorid FROM author WHERE name=?))";
            try(PreparedStatement stmt = mw.getDbConn().prepareStatement(sql)) {
                stmt.setString(1, newval);
                stmt.setString(2, authorname);
                stmt.executeUpdate();
                mw.getDbConn().commit();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            mw.notifyDBChange();
        }
    }
    
    public void deleteAuthor() {
        final String selectedAuthor = authorList.getSelectedValue();
        if(JOptionPane.showConfirmDialog(this, "Are you sure you want to delete \"" + selectedAuthor + "\"") != JOptionPane.OK_OPTION) {
            return;
        }
        String sql = "UPDATE author SET deleted=1 WHERE name=?";
        try(PreparedStatement stmt = mw.getDbConn().prepareStatement(sql)) {
            
            stmt.setString(1, selectedAuthor);
            stmt.executeUpdate();
            mw.getDbConn().commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        mw.notifyDBChange();
    }
    
    public void deleteBook() {
        final BookListItem selectedBook = bookList.getSelectedValue();
        if(JOptionPane.showConfirmDialog(this, "Are you sure you want to delete \"" + selectedBook.getTitle() + "\"") != JOptionPane.OK_OPTION) {
            return;
        }
        String sql = "UPDATE book SET deleted=1 WHERE bookid=?";
        try(PreparedStatement stmt = mw.getDbConn().prepareStatement(sql)) {
            
            stmt.setInt(1, selectedBook.getBookid());
            stmt.executeUpdate();
            mw.getDbConn().commit();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
        mw.notifyDBChange();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane2 = new javax.swing.JScrollPane();
        authorList = new javax.swing.JList<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        bookList = new javax.swing.JList<>();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        authorList.setModel(getAuthorListModel());
        jScrollPane2.setViewportView(authorList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(jScrollPane2, gridBagConstraints);

        bookList.setModel(getBookListModel());
        jScrollPane1.setViewportView(bookList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(jScrollPane1, gridBagConstraints);

        jButton2.setText("Add Author");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(jButton2, gridBagConstraints);

        jButton1.setText("Delete Author");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(jButton1, gridBagConstraints);

        jButton4.setText("Delete Book");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(jButton4, gridBagConstraints);

        jButton3.setText("Add Book");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        add(jButton3, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        deleteAuthor();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        deleteBook();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        addAuthor();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        addBook();
    }//GEN-LAST:event_jButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> authorList;
    private javax.swing.JList<BookListItem> bookList;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables

    @Override
    public void notifyDBChanges() {
        updateLists();
    }
}
